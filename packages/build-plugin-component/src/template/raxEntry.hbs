import { createElement, render, useState, useEffect } from "rax";
import DriverUniversal from "driver-universal";

const demos = [
  {{#each demos}}
  {
    name: '{{filename}}',
    title: '{{filename}}',
    js: `{{{highlightedCode}}}`,
    desc:`{{{markdownContent}}}`,
    css: `{{{highlightedStyle}}}`,
  },
  {{/each}}
];

const DemoBlock = ({ js, css, name, title, desc, active, onClick }) => {
  const [open, setOpen] = useState(false);
  const wrapperStyle = {maxHeight: open ? '800px' : '150px'};
  const jsxHtml = { __html: js || '' };
  const cssHtml = { __html: css || '' };
  const descHtml = {__html: desc || ''};
  const targets  = '{{targets}}'.split(',');
  const isWebEnable = ~targets.indexOf('web');
  const isWeexEnable = ~targets.indexOf('weex');
  const isMiniappEnable = ~targets.indexOf('miniapp');

  return (
    <div className="demo-item">
      <div className={`demo-box ${active ? 'active' : ''}`} onClick={onClick}>
        <div className="demo-box-meta">
          <div className="demo-box-title">
            <a target="_blank" href={ '{{command}}' === 'build' ? `./demo/${name}.html` : `/${name}` }>
              {name}
            </a>
          </div>
          <div className="icons">
            <a
              target="_blank"
              href={ '{{command}}' === 'build' ? `./demo/${name}.html` : `/${name}` }
              class={`icon web ${!isWebEnable ? 'disabled':''}`}
              onClick={(e) => {
                e.stopPropagation();
                if(!isWebEnable){
                  e.preventDefault();
                }
              }}
              unselectable="none"
            />
            {
              '{{command}}' !== 'build' ?
              <a
                target="_blank"
                href={`weex/${name}.js?wh_weex=true`}
                class={`icon weex ${!isWeexEnable ? 'disabled':''}`}
                onClick={(e) => {
                  e.stopPropagation();
                  if(!isWeexEnable){
                    e.preventDefault();
                  }
                }}
                unselectable="none"
              />:
              null
            }
            <span
            class="icon fullscreen"
            onClick={(e) => {
              e.stopPropagation();
                setOpen(!open);
              }}
              unselectable="none"
            />
          </div>
        </div>

        <div
          className="highlight-wrapper"
          style={wrapperStyle}
        >
          <div className="highlight">
            <pre class="language-jsx" dangerouslySetInnerHTML={jsxHtml} />
          </div>

          {css?
            (<div className="highlight">
              <pre class="language-css" dangerouslySetInnerHTML={cssHtml} />
            </div>):
            null
          }
        </div>
      </div>
      {
        desc?
          <div className="demo-body markdown-body"  dangerouslySetInnerHTML={descHtml}></div>:
          null
      }
    </div>
  );
};

const Device = ({ children }) => (
  <div className={`device-view`}>
    <svg className="device-md-bar" viewBox="0 0 1384.3 40.3">
      <path className="st0" d="M1343 5l18.8 32.3c.8 1.3 2.7 1.3 3.5 0L1384 5c.8-1.3-.2-3-1.7-3h-37.6c-1.5 0-2.5 1.7-1.7 3z" />
      <circle className="st0" cx="1299" cy="20.2" r="20" />
      <path
      className="st0"
      d="M1213 1.2h30c2.2 0 4 1.8 4 4v30c0 2.2-1.8 4-4 4h-30c-2.2 0-4-1.8-4-4v-30c0-2.3 1.8-4 4-4zM16 4.2h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H16c-8.8 0-16-7.2-16-16s7.2-16 16-16z"
      />
    </svg>

    <svg className="device-ios-notch" viewBox="0 0 219 31">
      <path d="M0 1V0h219v1a5 5 0 0 0-5 5v3c0 12.15-9.85 22-22 22H27C14.85 31 5 21.15 5 9V6a5 5 0 0 0-5-5z" fillRule="evenodd" />
    </svg>

    <div className="device-view-inner">{children}</div>
  </div>
);

const DemoBlocks = ({active:activeProp, onChange}) => {
  const [active, setActive ] = useState(activeProp);

  useEffect(() => {
  	setActive(activeProp);
  }, [active]);

  return demos.map((demo, index)=>{
    return (
      <DemoBlock
        key={demo.name}
        {...demo}
        active={demo.name === active}
        onClick={() => {
          setActive(demo.name);
          onChange(demo.name);
        }}
      />
    );
  })
}

function Portal(props){
  const docHtml = {__html: `{{{docHtml}}}` || ''};
  const iframeStyle = { width: '100%', height: '760px', border: 'none' };
  const [active, setActive ] = useState(demos && demos[0] && demos[0].name);
  const handleChange = (demo) => {
  	setActive(demo);
  }

  return (
    <div className="page">
      <div className="main-container">
        <h1>{props.title}</h1>
        <h2>DEMO</h2>
        <div>
          <DemoBlocks active={active} onChange={handleChange} />
        </div>
        <div className="markdown-body">
          <div dangerouslySetInnerHTML={docHtml}></div>
        </div>
      </div>
      <Device>
        <iframe src={ '{{command}}' === 'build' ? `./demo/${active}.html` :`/${active}`} style={iframeStyle}></iframe>
      </Device>
    </div>
  );
}

render(<Portal title="{{title}}" />, null, { driver: DriverUniversal });
