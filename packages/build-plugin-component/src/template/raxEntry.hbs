import { createElement, render, useState, useEffect } from "rax";
import DriverUniversal from "driver-universal";
import Device from "{{ modulesPath }}/device.js"

const demos = [
  {{#each demos}}
  {
    name: '{{filename}}',
    title: '{{filename}}',
    js: `{{{escape highlightedCode}}}`,
    desc:`{{{escape markdownContent}}}`,
    css: `{{{escape highlightedStyle}}}`,
  },
  {{/each}}
];

const DemoBlock = ({ js, css, name, title, desc, active, onClick }) => {
  const [open, setOpen] = useState(false);
  const wrapperStyle = {maxHeight: open ? '800px' : '150px'};
  const jsxHtml = { __html: js || '' };
  const cssHtml = { __html: css || '' };
  // remove style from portal
  const descContent = desc.replace(/<style>([\s\S]*?)<\/style>/, '');
  const descHtml = {__html: descContent || ''};
  const targets  = '{{targets}}'.split(',');
  const isWebEnable = ~targets.indexOf('web');
  const isWeexEnable = ~targets.indexOf('weex');
  const isMiniappEnable = ~targets.indexOf('miniapp');

  return (
    <div className={`demo-item ${active ? 'active' : ''} `} onClick={onClick}>
      <div className={`demo-box`}>
        <div
          className="highlight-wrapper"
          style={wrapperStyle}
        >
          <div className="highlight">
            <pre class="language-jsx" dangerouslySetInnerHTML={jsxHtml} />
          </div>

          {css?
            (<div className="highlight">
              <pre class="language-css" dangerouslySetInnerHTML={cssHtml} />
            </div>):
            null
          }
        </div>
      </div>
      <div className="demo-box-meta">
        <div className="demo-box-title">
          <a target="_blank" href={ '{{command}}' === 'build' ? `./demo/${name}.html` : `/${name}` }>
            {name}
          </a>
        </div>
        <div className="icons">
          <span
            class="icon fullscreen"
            onClick={(e) => {
              e.stopPropagation();
              setOpen(!open);
            }}
            unselectable="none"
          />
        </div>
      </div>
      {
        desc?
          <div className="demo-body markdown"  dangerouslySetInnerHTML={descHtml}></div>:
          null
      }
    </div>
  );
};

const DemoBlocks = ({active:activeProp, onChange}) => {
  const [active, setActive ] = useState(activeProp);

  useEffect(() => {
  	setActive(activeProp);
  }, [activeProp]);

  return demos.map((demo, index)=>{
    return (
      <DemoBlock
        key={demo.name}
        {...demo}
        active={demo.name === active}
        onClick={() => {
          setActive(demo.name);
          onChange(demo.name);
        }}
      />
    );
  })
}

function Portal(props){
  const docHtml = {__html: `{{{docHtml}}}` || ''};
  const iframeStyle = { width: '100%', height: '760px', border: 'none' };
  const [active, setActive ] = useState(demos && demos[0] && demos[0].name);

  const handleChange = (demo) => {
  	setActive(demo);
  }

  const handler = (e)=>{
    if(e.type === 'message' && e.data && e.data.type === 'demoSwitch'){
      const {
          data: {
            actionType
          }
      } = e;

      let curIndex = demos.findIndex(item=>item.name === active);

      if(!curIndex){
        curIndex = 0
      }

      if(actionType === 'next' && curIndex < demos.length - 1){
        setActive(demos[curIndex+1].name)
      }
      if(actionType === 'previous' && curIndex > 0){
        setActive(demos[curIndex-1].name)
      }
    }
  }

  useEffect(()=>{
    window.addEventListener('message', handler);

    return ()=>{
      window.removeEventListener('message', handler)
    }
  })

  return (
    <div className="page">
      <div className="main-container">
        <h1>{props.title}</h1>
        <h2>DEMO</h2>
        <div>
          <DemoBlocks active={active} onChange={handleChange} />
        </div>
        <div className="markdown">
          <div dangerouslySetInnerHTML={docHtml}></div>
        </div>
      </div>
      <Device active={active}>
        <iframe src={ '{{command}}' === 'build' ? `./demo/${active}.html` :`/${active}`} style={iframeStyle}></iframe>
      </Device>
    </div>
  );
}

render(<Portal title="{{title}}" />, null, { driver: DriverUniversal });
